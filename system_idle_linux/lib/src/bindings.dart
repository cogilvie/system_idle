// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Provides bindings to the XCB-based idle detection
class SystemIdleBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SystemIdleBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SystemIdleBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<NativePlugin> createPlugin() {
    return _createPlugin();
  }

  late final _createPluginPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NativePlugin> Function()>>(
          'createPlugin');
  late final _createPlugin =
      _createPluginPtr.asFunction<ffi.Pointer<NativePlugin> Function()>();

  void freePlugin(
    ffi.Pointer<NativePlugin> ptr,
  ) {
    return _freePlugin(
      ptr,
    );
  }

  late final _freePluginPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NativePlugin>)>>(
          'freePlugin');
  late final _freePlugin =
      _freePluginPtr.asFunction<void Function(ffi.Pointer<NativePlugin>)>();

  void initPlugin(
    ffi.Pointer<NativePlugin> ptr,
  ) {
    return _initPlugin(
      ptr,
    );
  }

  late final _initPluginPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NativePlugin>)>>(
          'initPlugin');
  late final _initPlugin =
      _initPluginPtr.asFunction<void Function(ffi.Pointer<NativePlugin>)>();

  int getIdleTime(
    ffi.Pointer<NativePlugin> ptr,
  ) {
    return _getIdleTime(
      ptr,
    );
  }

  late final _getIdleTimePtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<NativePlugin>)>>(
      'getIdleTime');
  late final _getIdleTime =
      _getIdleTimePtr.asFunction<int Function(ffi.Pointer<NativePlugin>)>();
}

final class NativePlugin extends ffi.Opaque {}
